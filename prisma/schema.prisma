generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           String          @default("user")
  isFrozen       Boolean         @default(false)
  password       String?
  accounts       Account[]
  bankAccount    BankAccount?
  beneficiaries  Beneficiary[]   @relation("UserBeneficiaries")
  kyc            Kyc?
  loans          Loan[]
  notifications  Notification[]
  sessions       Session[]
  supportTickets SupportTicket[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccount {
  id           String        @id @default(cuid())
  userId       String        @unique
  type         String        @default("savings")
  balance      Float         @default(0)
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String      @id @default(cuid())
  accountId   String
  type        String
  amount      Float
  description String?
  timestamp   DateTime    @default(now())
  account     BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Kyc {
  id         String   @id @default(cuid())
  userId     String   @unique
  document   String
  status     String   @default("pending")
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Loan {
  id           String   @id @default(uuid())
  userId       String
  amount       Float
  tenure       Int
  interestRate Float
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id        String   @id @default(cuid())
  title     String
  message   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Beneficiary {
  id             String   @id @default(cuid())
  ownerId        String
  recipientEmail String
  createdAt      DateTime @default(now())
  owner          User     @relation("UserBeneficiaries", fields: [ownerId], references: [id])

  @@unique([ownerId, recipientEmail])
}
